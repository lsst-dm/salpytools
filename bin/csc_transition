#!/usr/bin/env python3

''' Generic transition listener for any CSC '''

import argparse
import salpytools
import sys
import time

# the controller we want to listen to
# TODO: This could be a configurable list
_CONTROLER_list = ['enterControl',
                   'exitControl',
                   'start',
                   'standby',
                   'enable',
                   'disable']

spinner = salpytools.salpylib.spinner


class CSC_STATE_TRANSITIONER:

    """ A Class to reply to transition commands and change states for any generic CSC """

    def __init__(self, **keys):

        self.keys = keys
        # Unpack the dictionary of **keys into variables to do:
        # self.keyname = key['keyname']
        for k, v in list(keys.items()):
            setattr(self, k, v)

        # Inititalize the State class to keep track of the system's state
        self.init_State()

    def init_State(self, start_state=None):
        """
        Initialize the State object that keeps track of the HS current state.
        We use a start_state to set the initial state
        """
        eventlist = ['summaryState',
                     'settingVersions',
                     # 'rejectedCommand',
                     'settingsApplied',
                     'appliedSettingsMatchStart']

        if start_state:
            self.start_state = start_state

        self.State = salpytools.DeviceState(Device=self.Device,
                                            default_state=self.start_state,
                                            eventlist=eventlist)
        self.State.send_logEvent('summaryState')
        # Create threads for the controller we want to listen to
        self.tControl = {}
        for ctrl_name in _CONTROLER_list:
            self.tControl[ctrl_name] = salpytools.DDSController(ctrl_name, Device=self.Device,
                                                                State=self.State,
                                                                tsleep=self.tsleep)
            self.tControl[ctrl_name].start()

    def run_loop(self):

        """Run the loop that waits for a newEvent"""
        loop_n = 0
        while True:
            sys.stdout.flush()
            sys.stdout.write("Current State is {} [{}]".format(self.State.current_state, next(spinner)))
            sys.stdout.write('\r')
            time.sleep(self.wait_time)
            loop_n += 1


def cmdline():

    parser = argparse.ArgumentParser(description="Listen to transition commands for any CSC Device")

    # The optional arguments
    parser.add_argument("-d", "--Device", action="store", default='ATHeaderService',
                        help="Name of Device")
    parser.add_argument("--start_state", action="store", default='OFFLINE',
                        help="Initial start State of device")
    parser.add_argument("--tsleep", action="store", default=0.1, type=float,
                        help="Sleep Time for loop")
    parser.add_argument('-w', "--wait_time", type=int, default=0.25,
                        help='Wait time beteen for complete command')
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    args = cmdline()
    print("Will listen to transition events for the following Device: {}".format(args.Device))
    w = CSC_STATE_TRANSITIONER(**args.__dict__)
    w.run_loop()
